import random

import networkx as nx
import  numpy as np
import EoN
import matplotlib.pyplot as plt
import  collections
import  pandas as pd
# BA scale-free degree network
 # generalize BA network which has 20 nodes, m = 1---1000,12--1000,3
N=1000
r=0.004
def consnet(mark,mr):
    G = nx.Graph()
    nodes = range(0,1005)

    # 导入159个地铁站点
    '''
    G.add_nodes_from(nodes)
    edges = pd.read_csv('email-Eu-core.txt', sep=' ', header=None)
    edge_lists = [tuple(xi) for xi in edges.values]
    for edge_list in edge_lists:
        G.add_edge(*edge_list)    
    '''
    if mark==0:
        G = nx.erdos_renyi_graph(N, mr)


    elif mark==1:
        G = nx.random_graphs.barabasi_albert_graph(N, mr)
    degree = nx.degree_centrality(G)
    degreelist = list(degree.values())
    degreelists = [int(i * (N - 1)) for i in degreelist]
    degree_avg = np.mean(degreelists)
    print("平均度",degree_avg)
    degree_var=np.var(degreelists)
    degree_squar = [int(i * i) for i in degreelists]
    degree_squar_avg = np.mean(degree_squar)
    #print(type(float(degree_squar_avg)))
    #print(degree_squar_avg)
    #print(type(degree_var))
    beta_c = (degree_avg) / (degree_squar_avg - degree_avg)
    print("beta_c:",beta_c)
    #print("success")
    #print("平均聚类系数(average clustering): ", nx.average_clustering(G))
    return  G,beta_c,degree_var,degree_avg,float(degree_squar_avg)
def phase_diagram_infected(G,beta_c):

    iterations =1000  # run 5 simulations
    initial_node=[0]
    gamma=beta_c
    #rates=[0.002,0.004,0.006,0.008,0.01]
    #rates = [0.1, 0.2,0.4,0.6,0.8]
    rates = [20]
    #rates = [0.012, 0.014, 0.016, 0.018, 0.02]
    character=['o','-','*','s','x']
    color=['r','b','y','c','g']
    i=0
    for rate in rates:
        Rt=[]
        for counter in range(iterations):
                    t, S, I, R = EoN.fast_SIR(G,gamma*rate ,1 , initial_infecteds =initial_node)
                    Rt.append(R[-1])

        print(type(Rt))
        t=dict(collections.Counter(Rt))
        t=dict(sorted(t.items(), key=lambda x: x[0]))
        print(dict(t))
        x=[]
        y=[]
        for key,value in t.items():
            x.append(key)
            y.append(value)
        bizhi=1/rate
        #titles="β/γ"+str(bizhi)
        titles =  str(rate)+"倍βC"
        #plt.plot(x, y, label=titles,color=color[i])

        plt.plot(x, y, label=titles,color=color[i])
        i=i+1
    t="<k>="+str(N*r)+"--"
    plt.title("R态分布")
    plt.xlabel("size")
    plt.ylabel("frequency")
    #plt.axvline(x=3.74, linestyle='--', label='s*=3.74')
    plt.legend(loc="upper right")

    #plt.figure()
    #plt.hist(Rt)

    #plt.title(titles+"--infected node 分布")
    plt.rcParams['font.sans-serif'] = ['SimHei']  # 显示中文标签
    plt.show()
def bimodal():
    iterations = 1000  # run  simulations
    initial_node = [0]

    beta_range_er=[]
    beta_range_er2 = []
    degree_avg_er=[]
    degree_squar_avg_er=[]
    pvars=[]
    pavgs=[]
    #ER,mark=0
    for r in np.arange(0.012,0.052,0.002):
        G,beta_c,degree_var,degree_avg,degree_squar_avg = consnet(0,r)

        neighbors=list(G.neighbors(0))
        k=len(neighbors)
        #print("k",k)
        for rate in np.arange(6,1000,2):
            gamma = beta_c
            Rt = []
            for counter in range(iterations):
                    t, S, I, R = EoN.fast_SIR(G, gamma * rate, 1, initial_infecteds=initial_node)
                    Rt.append(R[-1])
            t = dict(collections.Counter(Rt))
            num0 = t.get(1, 0)
            nun1 = t.get(2, 0)
            num2 = t.get(3, 0)
            one_num = num2 + nun1 + num0
            #print("one_number",one_num)
            #print(type(one_num))
            #print(((abs(1-gamma * rate))**k))
            one_rate=int(one_num)/iterations
            if one_rate < ((abs(1-gamma * rate))**k):
                beta_range_er.append((rate-3)*beta_c)
                beta_range_er2.append(rate-3)
                degree_avg_er.append(degree_avg)
                pvars.append(degree_var)
                pavgs.append(degree_avg)
                degree_squar_avg_er.append(degree_squar_avg)
                break
    print(beta_range_er)
    print(degree_avg_er)
    with open('var_er_yz2.txt', 'w') as fp:
        [fp.write(str(item) + '\n') for item in pvars]
        fp.close()
    with open('avg_er_yz2.txt', 'w') as fp:
            [fp.write(str(item) + '\n') for item in pavgs]
            fp.close()
    with open('degree_squar_avg_er_yz2.txt', 'w') as fp:
            [fp.write(str(item) + '\n') for item in degree_squar_avg_er]
            fp.close()
    with open('range_mutiple_er_yz2.txt', 'w') as fp:
            [fp.write(str(item) + '\n') for item in beta_range_er2]
            fp.close()
    with open('range_er_yz2.txt', 'w') as fp:
            [fp.write(str(item) + '\n') for item in beta_range_er]
            fp.close()
    beta_range_ba=[]
    beta_range_ba2 = []
    degree_avg_ba=[]
    degree_squar_avg_ba=[]
    pvar=[]
    pavg=[]
    #ba,mark=1
    for r in range(12,32,1):
        G,beta_c,degree_var,degree_avg,degree_squar_avg = consnet(1,r)

        neighbors=list(G.neighbors(0))
        k=len(neighbors)
        for rate in np.arange(6,1000,2):
            gamma = beta_c
            Rt = []
            for counter in range(iterations):
                    t, S, I, R = EoN.fast_SIR(G, gamma * rate, 1, initial_infecteds=initial_node)
                    Rt.append(R[-1])
            t = dict(collections.Counter(Rt))
            num0 = t.get(1, 0)
            nun1 = t.get(2, 0)
            num2 = t.get(3, 0)
            one_num = num2 + nun1 + num0
            one_rate=int(one_num)/iterations
            if one_rate < (abs(1-gamma * rate))**k:
                beta_range_ba.append((rate-3)*beta_c)
                beta_range_ba2.append(rate-3)
                degree_avg_ba.append(degree_avg)
                pvar.append(degree_var)
                pavg.append(degree_avg)
                degree_squar_avg_ba.append(degree_squar_avg)
                break
    print(beta_range_ba)
    print(degree_avg_ba)
    with open('var_ba_yz2.txt', 'w') as fp:
        [fp.write(str(item) + '\n') for item in pvar]
        fp.close()
    with open('avg_ba_yz2.txt', 'w') as fp:
            [fp.write(str(item) + '\n') for item in pavg]
            fp.close()
    with open('degree_squar_avg_ba_yz2.txt', 'w') as fp:
            [fp.write(str(item) + '\n') for item in degree_squar_avg_ba]
            fp.close()
    with open('range_mutiple_ba_yz2.txt', 'w') as fp:
            [fp.write(str(item) + '\n') for item in beta_range_ba2]
            fp.close()
    with open('range_ba_yz2.txt', 'w') as fp:
            [fp.write(str(item) + '\n') for item in beta_range_ba]
    plt.plot(degree_avg_er, beta_range_er, label="ER")
    plt.plot(degree_avg_ba, beta_range_ba, label="BA")
    plt.title("bimodal range")
    plt.xlabel("degree_avg")
    plt.ylabel("bimodal_range")
    plt.legend(loc="upper right")
    plt.rcParams['font.sans-serif'] = ['SimHei']  # 显示中文标签
    plt.savefig("range_avgyz.png")
    plt.clf()
    plt.plot(degree_avg_er, beta_range_er2, label="ER")
    plt.plot(degree_avg_ba, beta_range_ba2, label="BA")
    plt.title("bimodal range(beta of mutiple)")
    plt.xlabel("degree_avg")
    plt.ylabel("bimodal_range")
    plt.legend(loc="upper right")
    plt.rcParams['font.sans-serif'] = ['SimHei']  # 显示中文标签
    plt.savefig("range_avg_mutiple_yz.png")
    #plt.show()
    plt.clf()


def bimodal_2():
    iterations = 500  # run  simulations
    initial_node = [0]

    beta_range_er=[]
    beta_range_er2 = []
    degree_var_er=[]
    beta_er=[]
    #ER,mark=0
    for r in np.arange(0.02,0.42,0.02):
        G, beta_c, degree_var, degree_avg = consnet(0,r)

        neighbors=list(G.neighbors(0))
        k=len(neighbors)
        for rate in np.arange(6,500,2):
            gamma = beta_c
            Rt = []
            for counter in range(iterations):
                    t, S, I, R = EoN.fast_SIR(G, gamma * rate, 1, initial_infecteds=initial_node)
                    Rt.append(R[-1])
            t = dict(collections.Counter(Rt))
            num0 = t.get(1, 0)
            nun1 = t.get(2, 0)
            num2 = t.get(3, 0)
            one_num = num2 + nun1 + num0
            #print(one_num)
            #print(type(one_num))
            one_rate=int(one_num)/iterations
            if one_rate < (abs(1-gamma * rate))**k:
                beta_er.append(beta_c)
                beta_range_er.append((rate-3)*beta_c)
                degree_var_er.append(degree_var)
                beta_range_er2.append(rate-3)
                break

    beta_range_ba=[]
    beta_range_ba2 = []
    degree_var_ba=[]
    beta_ba=[]
    with open('betac_er.txt', 'w') as fp:
        [fp.write(str(item) + '\n') for item in beta_er]
        fp.close()
    #ba,mark=1
    for r in range(2,22,1):
        G, beta_c, degree_var, degree_avg = consnet(1,r)

        neighbors=list(G.neighbors(0))
        k=len(neighbors)
        for rate in np.arange(6,500,2):
            gamma = beta_c
            Rt = []
            for counter in range(iterations):
                    t, S, I, R = EoN.fast_SIR(G, gamma * rate, 1, initial_infecteds=initial_node)
                    Rt.append(R[-1])
            t = dict(collections.Counter(Rt))
            num0=t.get(1,0)
            nun1=t.get(2,0)
            num2=t.get(3,0)
            one_num=num2+nun1+num0
            one_rate=int(one_num)/iterations
            if one_rate < (abs(1-gamma * rate))**k:
                beta_range_ba.append((rate-3)*beta_c)
                beta_range_ba2.append(rate-3)
                degree_var_ba.append(degree_var)
                beta_ba.append(beta_c)
                break
    with open('betac_ba.txt', 'w') as fp:
        [fp.write(str(item) + '\n') for item in beta_ba]
        fp.close()
    plt.plot(degree_var_er, beta_range_er, label="ER")
    plt.plot(degree_var_ba, beta_range_ba, label="BA")
    plt.title("bimodal range")
    plt.xlabel("degree_var")
    plt.ylabel("bimodal_range")
    plt.legend(loc="upper right")
    plt.rcParams['font.sans-serif'] = ['SimHei']  # 显示中文标签
    plt.savefig("range_varjinsi.png")
    plt.clf()
    plt.plot(degree_var_er, beta_range_er2, label="ER")
    plt.plot(degree_var_ba, beta_range_ba2, label="BA")
    plt.title("bimodal range")
    plt.xlabel("degree_var")
    plt.ylabel("bimodal_range(beta of mutiple)")
    plt.legend(loc="upper right")
    plt.rcParams['font.sans-serif'] = ['SimHei']  # 显示中文标签
    plt.savefig("range_var_mutiplejinsi.png")
    plt.show()
#G,beta_c,degree_squar,degree_avg=consnet()
#phase_diagram_infected(G,beta_c)
bimodal()
print("b2")
bimodal_2()






#plyplot
import matplotlib.pyplot as plt
import numpy as np

avg_ba= np.loadtxt('avg_ba_yz2.txt')
avg_er= np.loadtxt('avg_er_yz2.txt')
degree_squar_avg_ba= np.loadtxt('degree_squar_avg_ba_yz2.txt')
degree_squar_avg_er= np.loadtxt('degree_squar_avg_er_yz2.txt')
range_mutiple_ba= np.loadtxt('range_mutiple_ba_yz2.txt')
range_mutiple_er= np.loadtxt('range_mutiple_er_yz2.txt')

x = [72, 50, 81, 74, 94, 86, 59, 83, 65, 33, 88, 81]
s=[10,10,10,10,10,10,10,10,10,10,10,10]
er=[a/b for a,b in zip(avg_er,degree_squar_avg_er)]     #利用该语句实现
print(er)
ba=[a/b for a,b in zip(avg_ba,degree_squar_avg_ba)]
print(ba)
plt.plot(er, range_mutiple_er, label="ER")
plt.plot(ba, range_mutiple_ba, label="BA")
plt.title("bimodal range(beta of mutiple)")
plt.xlabel("degree_avg/degree_square_avg")
plt.ylabel("bimodal_range(beta of mutiple)")
plt.legend(loc="upper right")
plt.rcParams['font.sans-serif'] = ['SimHei']  # 显示中文标签
plt.show()
